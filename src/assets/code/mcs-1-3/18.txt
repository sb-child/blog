async fn login(State(state): State<AppState>, req: Json<login_req::LoginReq>) -> Json<login_resp::LoginResp> {
  let user: Result<mc_auth::prisma::user::Data, LoginTransactionError> = state
    .db
    ._transaction()
    .run(|cli| {
      let req = req.clone();
      async move {
        // 根据邮箱匹配用户
        let user_match_email = cli
          .user()
          .find_first(vec![
            prisma::user::email::equals(req.username.clone()),
            prisma::user::password::equals(req.password.clone()),
          ])
          .exec()
          .await?;
        if let Some(user) = user_match_email {
          return Ok(user);
        }
        // 根据游戏内名称匹配用户
        let user_match_displayname = cli
          .user()
          .find_first(vec![
            prisma::user::profile::some(vec![prisma::profile::display_name::equals(req.username.clone())]),
            prisma::user::password::equals(req.password.clone()),
          ])
          .exec()
          .await?;
        if let Some(user) = user_match_displayname {
          return Ok(user);
        }
        // 如果找不到用户, 则返回错误
        Err(LoginTransactionError::InvalidUser)
      }
    })
    .await;

  ...

}
